
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.awt.TextArea;
import java.util.*;
import java_cup.runtime.Symbol;
import Entorno.*;
import Entorno.Simbolo.EnumTipoDato;
import Expresion.*;
import Instruccion.*;
import Datos.Archivo.TipoRelacional;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintactico_rep extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintactico_rep() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintactico_rep(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintactico_rep(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\004\000\002\006\007\000\002\011\003\000" +
    "\002\011\003\000\002\005\007\000\002\004\005\000\002" +
    "\004\003\000\002\010\006\000\002\010\006\000\002\010" +
    "\014\000\002\010\010\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\012\003\012\026\010\027\006\030\013\001" +
    "\002\000\014\002\ufffe\003\ufffe\026\ufffe\027\ufffe\030\ufffe" +
    "\001\002\000\014\002\ufffd\003\ufffd\026\ufffd\027\ufffd\030" +
    "\ufffd\001\002\000\004\016\ufff9\001\002\000\004\002\067" +
    "\001\002\000\004\004\060\001\002\000\004\016\020\001" +
    "\002\000\004\007\017\001\002\000\004\016\ufff8\001\002" +
    "\000\014\002\ufffc\003\ufffc\026\ufffc\027\ufffc\030\ufffc\001" +
    "\002\000\014\002\000\003\012\026\010\027\006\030\013" +
    "\001\002\000\014\002\uffff\003\uffff\026\uffff\027\uffff\030" +
    "\uffff\001\002\000\014\002\ufffb\003\ufffb\026\ufffb\027\ufffb" +
    "\030\ufffb\001\002\000\004\010\021\001\002\000\020\016" +
    "\031\017\022\020\024\023\030\024\025\025\023\031\026" +
    "\001\002\000\010\005\ufff0\006\ufff0\007\ufff0\001\002\000" +
    "\004\004\046\001\002\000\010\005\uffef\006\uffef\007\uffef" +
    "\001\002\000\004\004\041\001\002\000\004\004\036\001" +
    "\002\000\004\007\035\001\002\000\004\004\032\001\002" +
    "\000\010\005\uffee\006\uffee\007\uffee\001\002\000\020\016" +
    "\031\017\022\020\024\023\030\024\025\025\023\031\026" +
    "\001\002\000\004\005\034\001\002\000\010\005\ufff3\006" +
    "\ufff3\007\ufff3\001\002\000\014\002\ufffa\003\ufffa\026\ufffa" +
    "\027\ufffa\030\ufffa\001\002\000\020\016\031\017\022\020" +
    "\024\023\030\024\025\025\023\031\026\001\002\000\004" +
    "\005\040\001\002\000\010\005\ufff4\006\ufff4\007\ufff4\001" +
    "\002\000\020\016\031\017\022\020\024\023\030\024\025" +
    "\025\023\031\026\001\002\000\004\006\043\001\002\000" +
    "\020\016\031\017\022\020\024\023\030\024\025\025\023" +
    "\031\026\001\002\000\004\005\045\001\002\000\010\005" +
    "\ufff1\006\ufff1\007\ufff1\001\002\000\020\016\031\017\022" +
    "\020\024\023\030\024\025\025\023\031\026\001\002\000" +
    "\004\006\050\001\002\000\020\016\031\017\022\020\024" +
    "\023\030\024\025\025\023\031\026\001\002\000\004\006" +
    "\052\001\002\000\004\011\053\001\002\000\004\006\uffed" +
    "\001\002\000\004\006\055\001\002\000\020\016\031\017" +
    "\022\020\024\023\030\024\025\025\023\031\026\001\002" +
    "\000\004\005\057\001\002\000\010\005\ufff2\006\ufff2\007" +
    "\ufff2\001\002\000\020\016\031\017\022\020\024\023\030" +
    "\024\025\025\023\031\026\001\002\000\006\005\063\006" +
    "\064\001\002\000\006\005\ufff5\006\ufff5\001\002\000\004" +
    "\007\066\001\002\000\020\016\031\017\022\020\024\023" +
    "\030\024\025\025\023\031\026\001\002\000\006\005\ufff6" +
    "\006\ufff6\001\002\000\014\002\ufff7\003\ufff7\026\ufff7\027" +
    "\ufff7\030\ufff7\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\016\002\006\003\014\005\013\006\004\007" +
    "\003\011\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\013\006\004\007\015\011\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\041\001\001\000\002" +
    "\001\001\000\004\010\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\046\001\001\000\002\001\001" +
    "\000\004\010\050\001\001\000\002\001\001\000\004\012" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\060\010\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintactico_rep$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintactico_rep$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintactico_rep$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    /*public static LinkedList<AcepErr> TablaErr=new LinkedList<AcepErr>();*/

    public LinkedList<Instruccion> resultado = new LinkedList<>();
    public TextArea salidaConsola;

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right + 1;
        int columna = s.left + 1;
        
        String info = "!!!!!!! Error Sintactico Recuperado !!!!!!!\n"+
                      "\tLexema: "+lexema+
                      "\tFila: "+fila+
                      "\tColumna: "+columna+
                      "\n";

        salidaConsola.append(info);
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
        /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado");
            TablaErr.add(datos);
            */
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right + 1;
        int columna = s.left + 1;
        
        String info = "!!!!!!! Error Sintactico, Panic Mode !!!!!!! "+
                "\tLexema: "+lexema+
                "\tFila: "+fila+
                "\tColumna: "+columna+
                "\n";

       /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado Error Fatal");
                   TablaErr.add(datos);
                  */
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintactico_rep$actions {




  private final analisis_sintactico_rep parser;

  /** Constructor */
  CUP$analisis_sintactico_rep$actions(analisis_sintactico_rep parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico_rep$do_action_part00000000(
    int                        CUP$analisis_sintactico_rep$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico_rep$parser,
    java.util.Stack            CUP$analisis_sintactico_rep$stack,
    int                        CUP$analisis_sintactico_rep$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico_rep$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico_rep$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintactico_rep$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintactico_rep$parser.done_parsing();
          return CUP$analisis_sintactico_rep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LISTAINSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()).right;
		LinkedList<Instruccion> ls = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.peek()).value;
		
            parser.resultado = ls;
        
              CUP$analisis_sintactico_rep$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_rep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTAINSTRUCCION ::= LISTAINSTRUCCION INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.peek()).value;
		
                    RESULT = a;
                    RESULT.add(b);
                
              CUP$analisis_sintactico_rep$result = parser.getSymbolFactory().newSymbol("LISTAINSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_rep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTAINSTRUCCION ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.peek()).value;
		
                    RESULT = new LinkedList<>(); 
                    RESULT.add(b);
                
              CUP$analisis_sintactico_rep$result = parser.getSymbolFactory().newSymbol("LISTAINSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_rep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.peek()).value;
		 RESULT = a; 
              CUP$analisis_sintactico_rep$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_rep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= IMPRIMIR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.peek()).value;
		 RESULT = a; 
              CUP$analisis_sintactico_rep$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_rep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= error puntoComa 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)).value;
		 RESULT = new InstruccionConError("Existe una instrucción con error, No se reconoció correctamente", aright, aleft); 
              CUP$analisis_sintactico_rep$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_rep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION ::= TIPO id igual E puntoComa 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-4)).right;
		EnumTipoDato tipo = (EnumTipoDato)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-3)).value;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)).right;
		Expresion asignacion = (Expresion)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)).value;
		 RESULT = new Declaracion(tipo, nombre, asignacion, tiporight, tipoleft); 
              CUP$analisis_sintactico_rep$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_rep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPO ::= numerico 
            {
              EnumTipoDato RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.peek()).value;
		 RESULT = EnumTipoDato.NUMERICO; 
              CUP$analisis_sintactico_rep$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_rep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO ::= archivo 
            {
              EnumTipoDato RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.peek()).value;
		 RESULT = EnumTipoDato.ARCHIVO; 
              CUP$analisis_sintactico_rep$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_rep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IMPRIMIR ::= imprimir apar LISTAE cpar puntoComa 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-2)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-2)).value;
		 RESULT = new Imprimir(b, aright, aleft); 
              CUP$analisis_sintactico_rep$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_rep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTAE ::= LISTAE coma E 
            {
              LinkedList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-2)).right;
		LinkedList<Expresion> l = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.peek()).value;
		
            RESULT = l;
            l.add(a);
        
              CUP$analisis_sintactico_rep$result = parser.getSymbolFactory().newSymbol("LISTAE",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_rep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTAE ::= E 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(a);
        
              CUP$analisis_sintactico_rep$result = parser.getSymbolFactory().newSymbol("LISTAE",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_rep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E ::= leerarchivo apar E cpar 
            {
              Expresion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-3)).value;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)).right;
		Expresion ruta = (Expresion)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)).value;
		 RESULT = new FuncionLeerArchivo(ruta, lright, lleft); 
              CUP$analisis_sintactico_rep$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_rep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E ::= contar apar E cpar 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)).value;
		 RESULT = new Contar(b, aright, aleft); 
              CUP$analisis_sintactico_rep$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_rep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E ::= contarSi apar E coma E coma RELA coma E cpar 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-7)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-5)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-3)).right;
		TipoRelacional d = (TipoRelacional)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)).value;
		 RESULT = new ContarSi(b, c, d, val, aright, aleft); 
              CUP$analisis_sintactico_rep$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_rep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E ::= sumar apar E coma E cpar 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-3)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-1)).value;
		 RESULT = new Sumar(b, c, aright, aleft); 
              CUP$analisis_sintactico_rep$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.elementAt(CUP$analisis_sintactico_rep$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_rep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E ::= numero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.peek()).value;
		 RESULT = new Literal(EnumTipoDato.NUMERICO, a); 
              CUP$analisis_sintactico_rep$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_rep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E ::= cadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.peek()).value;
		 RESULT = new Literal(EnumTipoDato.CADENA, a); 
              CUP$analisis_sintactico_rep$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_rep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E ::= id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico_rep$stack.peek()).value;
		 RESULT = new Id(a, aright, aleft); 
              CUP$analisis_sintactico_rep$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_rep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // RELA ::= igualigual 
            {
              TipoRelacional RESULT =null;
		 RESULT = TipoRelacional.IGUALIGUAL; 
              CUP$analisis_sintactico_rep$result = parser.getSymbolFactory().newSymbol("RELA",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico_rep$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico_rep$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico_rep$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico_rep$do_action(
    int                        CUP$analisis_sintactico_rep$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico_rep$parser,
    java.util.Stack            CUP$analisis_sintactico_rep$stack,
    int                        CUP$analisis_sintactico_rep$top)
    throws java.lang.Exception
    {
              return CUP$analisis_sintactico_rep$do_action_part00000000(
                               CUP$analisis_sintactico_rep$act_num,
                               CUP$analisis_sintactico_rep$parser,
                               CUP$analisis_sintactico_rep$stack,
                               CUP$analisis_sintactico_rep$top);
    }
}

}
